////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// FontAsCode exporter v1.0 - Font data exported as an array of bytes                 //
//                                                                                    //
// more info and bugs-report:  github.com/raysan5/raylib                              //
// feedback and support:       ray[at]raylib.com                                      //
//                                                                                    //
// Copyright (c) 2018-2024 Ramon Santamaria (@raysan5)                                //
//                                                                                    //
// ---------------------------------------------------------------------------------- //
//                                                                                    //
// TODO: Fill the information and license of the exported font here:                  //
//                                                                                    //
// Font name:    ....                                                                 //
// Font creator: ....                                                                 //
// Font LICENSE: ....                                                                 //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

#define COMPRESSED_DATA_SIZE_FONT_NOTOSANSMONOSMALL 390

// Font image pixels data compressed (DEFLATE)
// NOTE: Original pixel data simplified to GRAYSCALE
static unsigned char fontData_NotoSansMonoSmall[COMPRESSED_DATA_SIZE_FONT_NOTOSANSMONOSMALL] = { 0xed,
    0xd5, 0x31, 0x48, 0x55, 0x61, 0x18, 0xc6, 0xf1, 0x73, 0x87, 0xc2, 0x4b, 0x14, 0x4d, 0xde, 0xa0, 0xb4, 0x88, 0x76, 0x09,
    0xa2, 0x82, 0x04, 0x23, 0x97, 0x88, 0x20, 0x0a, 0x22, 0x90, 0x1a, 0x6e, 0x63, 0x4b, 0x41, 0x83, 0x43, 0xb6, 0x45, 0xb9,
    0x44, 0x63, 0x61, 0x8b, 0x5b, 0x05, 0x0d, 0xb9, 0x14, 0x0a, 0x91, 0x83, 0x34, 0x35, 0x44, 0x43, 0x45, 0x11, 0x51, 0x10,
    0x97, 0x28, 0xc5, 0x83, 0x5c, 0xe5, 0x8a, 0xd7, 0x9f, 0x78, 0xbc, 0x3a, 0xc8, 0x77, 0xae, 0xdc, 0x03, 0x0e, 0xe2, 0x79,
    0x9f, 0xe1, 0x7b, 0x87, 0x87, 0xe7, 0xcf, 0x39, 0xef, 0xcb, 0xf7, 0x89, 0x72, 0xe5, 0x12, 0xe9, 0x31, 0x68, 0xd0, 0x1d,
    0x97, 0x74, 0x34, 0xf5, 0x75, 0x28, 0x1b, 0xf6, 0x44, 0xd9, 0xae, 0x94, 0x8c, 0x7b, 0x2e, 0xdb, 0xdf, 0x32, 0xbf, 0xdf,
    0xa2, 0x51, 0x1f, 0xd5, 0x55, 0xf5, 0xa5, 0xba, 0x6e, 0x20, 0x36, 0xe2, 0xb5, 0x19, 0xc7, 0x03, 0x19, 0x35, 0xa3, 0xde,
    0x99, 0xc4, 0x50, 0xcb, 0xfc, 0x85, 0xe4, 0xdc, 0x6b, 0x5c, 0xd5, 0xce, 0xa0, 0xa7, 0xdb, 0xbc, 0x87, 0x76, 0x24, 0xfd,
    0xee, 0x60, 0x46, 0x25, 0x39, 0x0b, 0x6e, 0x9a, 0x77, 0x30, 0x13, 0x3f, 0xd2, 0x87, 0x13, 0x41, 0xcf, 0x84, 0x0f, 0x0d,
    0x7a, 0x5a, 0x46, 0xa5, 0xd1, 0xb5, 0xe3, 0x7a, 0x46, 0xfe, 0x55, 0x1c, 0x0e, 0x38, 0x0a, 0xa6, 0xdd, 0xdd, 0x20, 0x63,
    0x95, 0x5f, 0xb6, 0xe8, 0x40, 0x06, 0x7e, 0xd1, 0x49, 0xdf, 0x4c, 0x28, 0x04, 0x1c, 0x9d, 0xb8, 0xd2, 0xf8, 0xba, 0x92,
    0x52, 0x60, 0x02, 0xfd, 0xe6, 0x3c, 0xf3, 0xc2, 0x57, 0x9f, 0x9d, 0x6f, 0x79, 0xfe, 0xd4, 0xd4, 0xf1, 0x5c, 0x7b, 0xd0,
    0x71, 0x0a, 0xa7, 0x93, 0x2e, 0xb6, 0x5c, 0x8f, 0x02, 0x19, 0xb3, 0x86, 0x3c, 0x35, 0xa6, 0x62, 0x58, 0xb1, 0x45, 0x7e,
    0xdd, 0x59, 0x17, 0x55, 0x0d, 0xa4, 0x38, 0x4a, 0xb8, 0x96, 0x74, 0x47, 0x1d, 0xf3, 0x33, 0xc8, 0x5f, 0xfd, 0xff, 0x47,
    0xc4, 0x1e, 0x64, 0x9a, 0xff, 0x80, 0xaa, 0x43, 0x29, 0x9e, 0x7f, 0xee, 0xaf, 0xf5, 0x5f, 0x9a, 0xf2, 0x23, 0xe3, 0xde,
    0x66, 0xe2, 0xb7, 0xf9, 0xe1, 0x55, 0x8a, 0x67, 0x44, 0xbc, 0x76, 0x3b, 0x35, 0xe7, 0x17, 0xc5, 0x1e, 0x67, 0xdc, 0xff,
    0x0b, 0x38, 0x17, 0xf4, 0xec, 0xf3, 0xdb, 0x27, 0xb7, 0x74, 0xe9, 0xf6, 0x27, 0xc8, 0x9f, 0x72, 0x46, 0xaf, 0xdb, 0xde,
    0xab, 0xe9, 0xc9, 0xc8, 0x8f, 0xbc, 0xf1, 0x5d, 0x5b, 0xd0, 0xd5, 0xe5, 0xa5, 0xbf, 0xc9, 0xf6, 0xfd, 0x6a, 0xec, 0xc2,
    0xfa, 0x1d, 0x5e, 0xae, 0xff, 0xc6, 0xf4, 0x6e, 0xda, 0x4b, 0x51, 0xd0, 0x69, 0x4f, 0xfe, 0x62, 0xe6, 0xca, 0x95, 0x2b,
    0x57, 0xae, 0x2d, 0xaa, 0x95, 0xda, 0xe6, 0xfc, 0x25 };

// Font characters rectangles data
static Rectangle fontRecs_NotoSansMonoSmall[3] = {
    { 4, 4, 9 , 12 },
    { 21, 4, 9 , 13 },
    { 38, 4, 8 , 12 },
};

// Font glyphs info data
// NOTE: No glyphs.image data provided
static GlyphInfo fontGlyphs_NotoSansMonoSmall[3] = {
    { 82, 1, 5, 9, { 0 }},
    { 71, 0, 5, 9, { 0 }},
    { 66, 1, 5, 9, { 0 }},
};

// Font loading function: NotoSansMonoSmall
static Font LoadFont_NotoSansMonoSmall(void)
{
    Font font = { 0 };

    font.baseSize = 22;
    font.glyphCount = 3;
    font.glyphPadding = 4;

    // Custom font loading
    // NOTE: Compressed font image data (DEFLATE), it requires DecompressData() function
    int fontDataSize_NotoSansMonoSmall = 0;
    unsigned char *data = DecompressData(fontData_NotoSansMonoSmall, COMPRESSED_DATA_SIZE_FONT_NOTOSANSMONOSMALL, &fontDataSize_NotoSansMonoSmall);
    Image imFont = { data, 64, 32, 1, 2 };

    // Load texture from image: removed broken check to isGpuReady
    font.texture = LoadTextureFromImage(imFont);
    UnloadImage(imFont);  // Uncompressed data can be unloaded from memory

    // Assign glyph recs and info data directly
    // WARNING: This font data must not be unloaded
    font.recs = fontRecs_NotoSansMonoSmall;
    font.glyphs = fontGlyphs_NotoSansMonoSmall;

    return font;
}
