////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// FontAsCode exporter v1.0 - Font data exported as an array of bytes                 //
//                                                                                    //
// more info and bugs-report:  github.com/raysan5/raylib                              //
// feedback and support:       ray[at]raylib.com                                      //
//                                                                                    //
// Copyright (c) 2018-2024 Ramon Santamaria (@raysan5)                                //
//                                                                                    //
// ---------------------------------------------------------------------------------- //
//                                                                                    //
// TODO: Fill the information and license of the exported font here:                  //
//                                                                                    //
// Font name:    ....                                                                 //
// Font creator: ....                                                                 //
// Font LICENSE: ....                                                                 //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

#define COMPRESSED_DATA_SIZE_FONT_NOTOSANSMONOLARGE 500

// Font image pixels data compressed (DEFLATE)
// NOTE: Original pixel data simplified to GRAYSCALE
static unsigned char fontData_NotoSansMonoLarge[COMPRESSED_DATA_SIZE_FONT_NOTOSANSMONOLARGE] = { 0xed,
    0x96, 0x3f, 0x48, 0x55, 0x51, 0x1c, 0xc7, 0x6f, 0x26, 0x17, 0x7b, 0x81, 0x92, 0x34, 0x44, 0x83, 0x3c, 0x6a, 0x32, 0x03,
    0x87, 0xca, 0x88, 0x97, 0x8b, 0x0d, 0x51, 0x63, 0xd1, 0x94, 0x83, 0xd1, 0x62, 0x24, 0x06, 0x41, 0x44, 0x41, 0x81, 0x82,
    0x15, 0xd5, 0x10, 0x0d, 0x11, 0x46, 0xd0, 0x50, 0x81, 0x54, 0x4b, 0xa0, 0x6e, 0x82, 0x28, 0x38, 0x28, 0x22, 0xa2, 0xa0,
    0x0f, 0x14, 0x71, 0x72, 0xf0, 0x0f, 0x2a, 0xa2, 0xa0, 0xef, 0x7d, 0x84, 0x9f, 0xcf, 0x8b, 0x78, 0xcf, 0x51, 0x79, 0xf7,
    0x5c, 0x17, 0x7f, 0xf7, 0x33, 0x9d, 0xdf, 0xf9, 0xfe, 0xf8, 0x3c, 0xce, 0x3b, 0xe7, 0xde, 0x83, 0xa7, 0x28, 0x78, 0x5c,
    0x66, 0x35, 0xc7, 0x0a, 0xa3, 0xfc, 0xa1, 0x89, 0xbb, 0x14, 0x1c, 0xb0, 0x37, 0x41, 0x39, 0x29, 0x92, 0x14, 0x46, 0xf0,
    0x57, 0x11, 0x7e, 0x3a, 0x29, 0xdd, 0xa7, 0xab, 0x98, 0x27, 0xa4, 0xc9, 0xe6, 0xf2, 0x1b, 0x74, 0x53, 0x4b, 0x51, 0x04,
    0xff, 0x77, 0xee, 0x70, 0x8f, 0xc7, 0xbc, 0x63, 0x4a, 0xc6, 0x93, 0x24, 0xf7, 0xe8, 0xb9, 0xc4, 0x4c, 0xe8, 0x37, 0xaf,
    0x53, 0x16, 0xc1, 0xdf, 0x18, 0x8c, 0x0b, 0x69, 0x95, 0xca, 0x33, 0x6b, 0x47, 0x8a, 0x25, 0x49, 0x2c, 0xd0, 0x46, 0x1d,
    0xe5, 0xd4, 0x50, 0x4f, 0x1f, 0xff, 0x22, 0xad, 0x7f, 0xe3, 0x8e, 0x4a, 0x11, 0xf3, 0x40, 0x87, 0x25, 0xef, 0x33, 0x26,
    0x1d, 0x5f, 0x77, 0xfd, 0xeb, 0x09, 0x67, 0x7e, 0x8f, 0x5e, 0x60, 0xc9, 0xb2, 0xab, 0x9e, 0x4a, 0x7e, 0x98, 0x13, 0x8e,
    0xf6, 0xbf, 0xc9, 0xdf, 0x25, 0x7e, 0xf3, 0x29, 0x18, 0x05, 0x56, 0xa8, 0x70, 0x76, 0xfe, 0xc2, 0xfe, 0x02, 0x16, 0x81,
    0x1e, 0x63, 0xba, 0x4c, 0xd2, 0x6d, 0x0e, 0xcf, 0x7f, 0xd8, 0x5f, 0x2b, 0x95, 0x0f, 0xc6, 0xf4, 0x03, 0x99, 0x6b, 0x8e,
    0xc9, 0xef, 0x53, 0xc1, 0x4b, 0x32, 0x40, 0x9a, 0x12, 0x63, 0xfa, 0xb5, 0xa4, 0xef, 0x3b, 0xf7, 0xcf, 0x32, 0xc1, 0x14,
    0xeb, 0xb9, 0xb3, 0x9c, 0xe6, 0xa2, 0x25, 0xfd, 0x59, 0xe6, 0xaf, 0x04, 0xe3, 0x12, 0x4a, 0x03, 0x12, 0x8e, 0xde, 0x7f,
    0x4d, 0xf8, 0xd6, 0xf4, 0x6f, 0x49, 0x9c, 0x0a, 0xc6, 0x83, 0x3b, 0xfa, 0x3e, 0x45, 0xf0, 0xff, 0xa5, 0x81, 0x06, 0x5e,
    0xc9, 0x1b, 0xb5, 0x75, 0x8f, 0xf4, 0x0f, 0x49, 0x27, 0x9d, 0xfb, 0xb7, 0xf7, 0xdf, 0x4f, 0x20, 0x43, 0x95, 0x35, 0xfd,
    0x51, 0xd2, 0x35, 0xc1, 0xf8, 0x1a, 0x37, 0x85, 0x8c, 0x23, 0xff, 0x59, 0x96, 0x81, 0x7e, 0xeb, 0x17, 0xf0, 0x85, 0xa4,
    0x1f, 0x86, 0xea, 0x1b, 0x8e, 0xfc, 0x1e, 0xcf, 0x65, 0x5c, 0x6f, 0x49, 0xdf, 0x96, 0xd9, 0x96, 0x18, 0xfd, 0x3e, 0xe3,
    0xc0, 0x1c, 0xa7, 0x8d, 0xe9, 0x93, 0xac, 0x01, 0xd3, 0x14, 0xc7, 0xe6, 0xf7, 0xb8, 0x25, 0x95, 0x6f, 0x96, 0x7c, 0xbb,
    0xcc, 0x7e, 0x89, 0xd1, 0xef, 0xf1, 0x5f, 0x76, 0xe1, 0x55, 0x63, 0xbe, 0x52, 0x5c, 0x59, 0x6e, 0xc4, 0xe8, 0x3f, 0x2f,
    0xab, 0x3c, 0xc0, 0x71, 0x63, 0xc7, 0x7b, 0xe9, 0xc8, 0x32, 0xc4, 0x1b, 0x52, 0x9c, 0xa1, 0x92, 0x3a, 0x39, 0xb7, 0xee,
    0xfc, 0x1e, 0x2d, 0x52, 0x7d, 0x64, 0xec, 0x38, 0x46, 0xb3, 0xe1, 0xce, 0x96, 0xaf, 0x3f, 0x3f, 0xae, 0xf3, 0x4b, 0xd6,
    0x88, 0xdc, 0x5a, 0x8c, 0xf0, 0x96, 0x0b, 0x87, 0x7c, 0x73, 0xf6, 0x49, 0x52, 0x4d, 0x35, 0xe7, 0xf2, 0xbc, 0x79, 0x2a,
    0x8a, 0xa2, 0x28, 0x8a, 0xa2, 0x28, 0x8a, 0xa2, 0x28, 0x8a, 0xa2, 0x28, 0xf1, 0xb0, 0xf5, 0x1c, 0x71, 0xff, 0x26 };

// Font characters rectangles data
static Rectangle fontRecs_NotoSansMonoLarge[3] = {
    { 4, 4, 15 , 21 },
    { 27, 4, 15 , 23 },
    { -431602080, -431602080, -431602080 , -431602080 },
};

// Font glyphs info data
// NOTE: No glyphs.image data provided
static GlyphInfo fontGlyphs_NotoSansMonoLarge[3] = {
    { 82, 2, 10, 17, { 0 }},
    { 71, 1, 9, 17, { 0 }},
    { 66, 2, 10, 17, { 0 }},
};

// Font loading function: NotoSansMonoLarge
static Font LoadFont_NotoSansMonoLarge(void)
{
    Font font = { 0 };

    font.baseSize = 40;
    font.glyphCount = 3;
    font.glyphPadding = 4;

    // Custom font loading
    // NOTE: Compressed font image data (DEFLATE), it requires DecompressData() function
    int fontDataSize_NotoSansMonoLarge = 0;
    unsigned char *data = DecompressData(fontData_NotoSansMonoLarge, COMPRESSED_DATA_SIZE_FONT_NOTOSANSMONOLARGE, &fontDataSize_NotoSansMonoLarge);
    Image imFont = { data, 64, 64, 1, 2 };

    // Load texture from image: removed broken check to isGpuReady
    font.texture = LoadTextureFromImage(imFont);
    UnloadImage(imFont);  // Uncompressed data can be unloaded from memory

    // Assign glyph recs and info data directly
    // WARNING: This font data must not be unloaded
    font.recs = fontRecs_NotoSansMonoLarge;
    font.glyphs = fontGlyphs_NotoSansMonoLarge;

    return font;
}
